/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, Input, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';
import { SPINNER_ANIMATIONS } from './ngx-spinner.types';
import { BlinkComponent } from './blink/blink.component';
import { FbCardComponent } from './fb-card/fb-card.component';
import { PlateRotateComponent } from './plate-rotate/plate-rotate.component';
import { DoubleBounceComponent } from './double-bounce/double-bounce.component';
import { FoldingCubeComponent } from './folding-cube/folding-cube.component';
import { BarsComponent } from './bars/bars.component';
import { RotatingDotsComponent } from './rotating-dots/rotating-dots.component';
import { HorizontalBounceComponent } from './horizontal-bounce/horizontal-bounce.component';
import { Spin1Component } from './spin1/spin1.component';
import { Spin2Component } from './spin2/spin2.component';
import { Spin3Component } from './spin3/spin3.component';
var SpinnerAnimationDirective = /** @class */ (function () {
    function SpinnerAnimationDirective(viewContainerRef, componentFactoryResolver) {
        this.viewContainerRef = viewContainerRef;
        this.componentFactoryResolver = componentFactoryResolver;
    }
    Object.defineProperty(SpinnerAnimationDirective.prototype, "config", {
        set: /**
         * @param {?} conf
         * @return {?}
         */
        function (conf) {
            this.init(conf);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} conf
     * @return {?}
     */
    SpinnerAnimationDirective.prototype.init = /**
     * @param {?} conf
     * @return {?}
     */
    function (conf) {
        var /** @type {?} */ componenet = BlinkComponent;
        if (conf.animation == SPINNER_ANIMATIONS.blink) {
            // blink
            componenet = BlinkComponent;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.fb_card) {
            // fb_card
            componenet = FbCardComponent;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.plate_rotate) {
            componenet = PlateRotateComponent;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.double_bounce) {
            componenet = DoubleBounceComponent;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.folding_cube) {
            componenet = FoldingCubeComponent;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.bars) {
            componenet = BarsComponent;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.rotating_dots) {
            componenet = RotatingDotsComponent;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.horizontal_bounce) {
            componenet = HorizontalBounceComponent;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.spin_1) {
            componenet = Spin1Component;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.spin_2) {
            componenet = Spin2Component;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.spin_3) {
            componenet = Spin3Component;
        } /* else if(conf.animation==SPINNER_ANIMATIONS.spin_4) {
                    componenet = Spin4Component;
                } */
        var /** @type {?} */ componentFactory = this.componentFactoryResolver.resolveComponentFactory(componenet);
        this.viewContainerRef.clear();
        var /** @type {?} */ componentRef = this.viewContainerRef.createComponent(componentFactory);
        (componentRef.instance).config = conf;
    };
    SpinnerAnimationDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[spinner-animation]'
                },] },
    ];
    /** @nocollapse */
    SpinnerAnimationDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver }
    ]; };
    SpinnerAnimationDirective.propDecorators = {
        config: [{ type: Input, args: ['spinner-animation',] }]
    };
    return SpinnerAnimationDirective;
}());
export { SpinnerAnimationDirective };
function SpinnerAnimationDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    SpinnerAnimationDirective.prototype.viewContainerRef;
    /** @type {?} */
    SpinnerAnimationDirective.prototype.componentFactoryResolver;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci1hbmltYXRpb24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGhhcmRwb29sL25neC1zcGlubmVyLyIsInNvdXJjZXMiOlsic3JjL2FwcC9uZ3gtc3Bpbm5lci9zcGlubmVyLWFuaW1hdGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLHdCQUF3QixFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUMzRyxPQUFPLEVBQWtCLGtCQUFrQixFQUFxQixNQUFNLHFCQUFxQixDQUFDO0FBQzVGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDN0UsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDaEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDN0UsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQzVGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDOztJQVF4RCxtQ0FBb0IsZ0JBQWtDLEVBQVUsd0JBQWtEO1FBQTlGLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFBVSw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO0tBQUs7SUFFdkgs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WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBWaWV3Q29udGFpbmVyUmVmLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIENvbXBvbmVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSVNwaW5uZXJDb25maWcsIFNQSU5ORVJfQU5JTUFUSU9OUywgSVNwaW5uZXJBbmltYXRpb24gfSBmcm9tICcuL25neC1zcGlubmVyLnR5cGVzJztcbmltcG9ydCB7IEJsaW5rQ29tcG9uZW50IH0gZnJvbSAnLi9ibGluay9ibGluay5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmJDYXJkQ29tcG9uZW50IH0gZnJvbSAnLi9mYi1jYXJkL2ZiLWNhcmQuY29tcG9uZW50JztcbmltcG9ydCB7IFBsYXRlUm90YXRlQ29tcG9uZW50IH0gZnJvbSAnLi9wbGF0ZS1yb3RhdGUvcGxhdGUtcm90YXRlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEb3VibGVCb3VuY2VDb21wb25lbnQgfSBmcm9tICcuL2RvdWJsZS1ib3VuY2UvZG91YmxlLWJvdW5jZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRm9sZGluZ0N1YmVDb21wb25lbnQgfSBmcm9tICcuL2ZvbGRpbmctY3ViZS9mb2xkaW5nLWN1YmUuY29tcG9uZW50JztcbmltcG9ydCB7IEJhcnNDb21wb25lbnQgfSBmcm9tICcuL2JhcnMvYmFycy5jb21wb25lbnQnO1xuaW1wb3J0IHsgUm90YXRpbmdEb3RzQ29tcG9uZW50IH0gZnJvbSAnLi9yb3RhdGluZy1kb3RzL3JvdGF0aW5nLWRvdHMuY29tcG9uZW50JztcbmltcG9ydCB7IEhvcml6b250YWxCb3VuY2VDb21wb25lbnQgfSBmcm9tICcuL2hvcml6b250YWwtYm91bmNlL2hvcml6b250YWwtYm91bmNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTcGluMUNvbXBvbmVudCB9IGZyb20gJy4vc3BpbjEvc3BpbjEuY29tcG9uZW50JztcbmltcG9ydCB7IFNwaW4yQ29tcG9uZW50IH0gZnJvbSAnLi9zcGluMi9zcGluMi5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3BpbjNDb21wb25lbnQgfSBmcm9tICcuL3NwaW4zL3NwaW4zLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTcGluNENvbXBvbmVudCB9IGZyb20gJy4vc3BpbjQvc3BpbjQuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3NwaW5uZXItYW5pbWF0aW9uXSdcbn0pXG5leHBvcnQgY2xhc3MgU3Bpbm5lckFuaW1hdGlvbkRpcmVjdGl2ZSB7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBwcml2YXRlIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKSB7IH1cblx0XG5cdEBJbnB1dCgnc3Bpbm5lci1hbmltYXRpb24nKVxuICBzZXQgY29uZmlnKGNvbmY6IElTcGlubmVyQ29uZmlnKXtcblx0XHR0aGlzLmluaXQoY29uZik7XG5cdH1cblx0XG5cdHByaXZhdGUgaW5pdChjb25mOiBJU3Bpbm5lckNvbmZpZyl7XG5cdFx0bGV0IGNvbXBvbmVuZXQgPSBCbGlua0NvbXBvbmVudDtcblx0XHRpZihjb25mLmFuaW1hdGlvbj09U1BJTk5FUl9BTklNQVRJT05TLmJsaW5rKXtcdFx0Ly8gYmxpbmtcblx0XHRcdGNvbXBvbmVuZXQgPSBCbGlua0NvbXBvbmVudDtcblx0XHR9IGVsc2UgaWYoY29uZi5hbmltYXRpb249PVNQSU5ORVJfQU5JTUFUSU9OUy5mYl9jYXJkKSB7XHRcdC8vIGZiX2NhcmRcblx0XHRcdGNvbXBvbmVuZXQgPSBGYkNhcmRDb21wb25lbnQ7XG5cdFx0fSBlbHNlIGlmKGNvbmYuYW5pbWF0aW9uPT1TUElOTkVSX0FOSU1BVElPTlMucGxhdGVfcm90YXRlKSB7XG5cdFx0XHRjb21wb25lbmV0ID0gUGxhdGVSb3RhdGVDb21wb25lbnQ7XG5cdFx0fSBlbHNlIGlmKGNvbmYuYW5pbWF0aW9uPT1TUElOTkVSX0FOSU1BVElPTlMuZG91YmxlX2JvdW5jZSkge1xuXHRcdFx0Y29tcG9uZW5ldCA9IERvdWJsZUJvdW5jZUNvbXBvbmVudDtcblx0XHR9IGVsc2UgaWYoY29uZi5hbmltYXRpb249PVNQSU5ORVJfQU5JTUFUSU9OUy5mb2xkaW5nX2N1YmUpIHtcblx0XHRcdGNvbXBvbmVuZXQgPSBGb2xkaW5nQ3ViZUNvbXBvbmVudDtcblx0XHR9IGVsc2UgaWYoY29uZi5hbmltYXRpb249PVNQSU5ORVJfQU5JTUFUSU9OUy5iYXJzKSB7XG5cdFx0XHRjb21wb25lbmV0ID0gQmFyc0NvbXBvbmVudDtcblx0XHR9IGVsc2UgaWYoY29uZi5hbmltYXRpb249PVNQSU5ORVJfQU5JTUFUSU9OUy5yb3RhdGluZ19kb3RzKSB7XG5cdFx0XHRjb21wb25lbmV0ID0gUm90YXRpbmdEb3RzQ29tcG9uZW50O1xuXHRcdH0gZWxzZSBpZihjb25mLmFuaW1hdGlvbj09U1BJTk5FUl9BTklNQVRJT05TLmhvcml6b250YWxfYm91bmNlKSB7XG5cdFx0XHRjb21wb25lbmV0ID0gSG9yaXpvbnRhbEJvdW5jZUNvbXBvbmVudDtcblx0XHR9IGVsc2UgaWYoY29uZi5hbmltYXRpb249PVNQSU5ORVJfQU5JTUFUSU9OUy5zcGluXzEpIHtcblx0XHRcdGNvbXBvbmVuZXQgPSBTcGluMUNvbXBvbmVudDtcblx0XHR9IGVsc2UgaWYoY29uZi5hbmltYXRpb249PVNQSU5ORVJfQU5JTUFUSU9OUy5zcGluXzIpIHtcblx0XHRcdGNvbXBvbmVuZXQgPSBTcGluMkNvbXBvbmVudDtcblx0XHR9IGVsc2UgaWYoY29uZi5hbmltYXRpb249PVNQSU5ORVJfQU5JTUFUSU9OUy5zcGluXzMpIHtcblx0XHRcdGNvbXBvbmVuZXQgPSBTcGluM0NvbXBvbmVudDtcblx0XHR9IC8qIGVsc2UgaWYoY29uZi5hbmltYXRpb249PVNQSU5ORVJfQU5JTUFUSU9OUy5zcGluXzQpIHtcblx0XHRcdGNvbXBvbmVuZXQgPSBTcGluNENvbXBvbmVudDtcblx0XHR9ICovXG5cblx0XHRsZXQgY29tcG9uZW50RmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVuZXQpO1xuXHRcdHRoaXMudmlld0NvbnRhaW5lclJlZi5jbGVhcigpO1xuXHRcdGxldCBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxJU3Bpbm5lckFuaW1hdGlvbj4gPSB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlQ29tcG9uZW50KGNvbXBvbmVudEZhY3RvcnkpO1xuXHRcdChjb21wb25lbnRSZWYuaW5zdGFuY2UpLmNvbmZpZyA9IGNvbmY7XG5cdH1cblxufVxuIl19