/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { NgxSpinnerService } from './ngx-spinner.service';
import { DEFAULT_CONFIG } from '../ngx-spinner.types';
var NgxSpinner = /** @class */ (function () {
    function NgxSpinner(ngxSpinnerService) {
        this.ngxSpinnerService = ngxSpinnerService;
        this._config = {};
        // assign default config
        this.assignConfig(DEFAULT_CONFIG);
        // override wtih globle config
        this.assignConfig(NgxSpinnerService.globalSpinnerConf);
        // hide spinner as default
        this._isVisible = false;
    }
    Object.defineProperty(NgxSpinner.prototype, "visible", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isVisible;
        },
        set: /**
         * @param {?} condition
         * @return {?}
         */
        function (condition) {
            if (condition)
                this.show();
            else
                this.hide();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxSpinner.prototype, "config", {
        get: /**
         * @return {?}
         */
        function () {
            return this._config;
        },
        set: /**
         * @param {?} conf
         * @return {?}
         */
        function (conf) {
            // override with spinner config
            this.assignConfig(conf);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxSpinner.prototype.show = /**
     * @return {?}
     */
    function () {
        this._isVisible = true;
    };
    /**
     * @return {?}
     */
    NgxSpinner.prototype.hide = /**
     * @return {?}
     */
    function () {
        this._isVisible = false;
    };
    /**
     * @return {?}
     */
    NgxSpinner.prototype.toggle = /**
     * @return {?}
     */
    function () {
        this._isVisible = !this._isVisible;
    };
    /**
     * @param {?} conf
     * @return {?}
     */
    NgxSpinner.prototype.assignConfig = /**
     * @param {?} conf
     * @return {?}
     */
    function (conf) {
        var /** @type {?} */ cnf = Object.assign(conf);
        for (var /** @type {?} */ prop in cnf) {
            if (cnf.hasOwnProperty(prop))
                this._config[prop] = cnf[prop];
        }
    };
    NgxSpinner.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-spinner',
                    template: "<!-- spinner -->\n<ng-template *ngIf=\"visible\" [spinner-animation]=\"config\"></ng-template>",
                    styles: [":host.block_window{align-items:center;justify-content:center;position:fixed;display:flex;width:100%;height:100%;top:0;left:0;z-index:10002}:host.block_ui{align-items:center;justify-content:center;position:absolute;display:flex;width:100%;height:100%;top:0;left:0;z-index:10001}:host.inplace{position:absolute;background:0 0!important;display:flex;width:100%;height:100%;top:0;left:0;align-items:center;justify-content:start}"],
                    host: { '[class]': 'visible?config.placement:""', '[style.background]': 'visible?config.bgColor:""' }
                },] },
    ];
    /** @nocollapse */
    NgxSpinner.ctorParameters = function () { return [
        { type: NgxSpinnerService }
    ]; };
    NgxSpinner.propDecorators = {
        visible: [{ type: Input }],
        config: [{ type: Input }]
    };
    return NgxSpinner;
}());
export { NgxSpinner };
function NgxSpinner_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxSpinner.prototype._config;
    /** @type {?} */
    NgxSpinner.prototype._isVisible;
    /** @type {?} */
    NgxSpinner.prototype.ngxSpinnerService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNwaW5uZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGhhcmRwb29sL25neC1zcGlubmVyLyIsInNvdXJjZXMiOlsic3JjL2FwcC9uZ3gtc3Bpbm5lci9uZ3gtc3Bpbm5lci9uZ3gtc3Bpbm5lci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBa0IsY0FBYyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7O0lBYXJFLG9CQUFvQixpQkFBb0M7UUFBcEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjt1QkFIdEIsRUFBRTs7UUFLbkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQzs7UUFFbEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDOztRQUV2RCxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztLQUN4QjtJQUVELHNCQUNJLCtCQUFPOzs7O1FBTVg7WUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUN2Qjs7Ozs7UUFURCxVQUNZLFNBQWM7WUFDekIsRUFBRSxDQUFBLENBQUMsU0FBUyxDQUFDO2dCQUNaLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNiLElBQUk7Z0JBQ0gsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ2I7OztPQUFBO0lBSUQsc0JBQ0ksOEJBQU07Ozs7UUFJVjtZQUNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ3BCOzs7OztRQVBELFVBQ1csSUFBb0I7O1lBRTlCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDeEI7OztPQUFBOzs7O0lBS0QseUJBQUk7OztJQUFKO1FBQ0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7S0FDdkI7Ozs7SUFFRCx5QkFBSTs7O0lBQUo7UUFDQyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztLQUN4Qjs7OztJQUVELDJCQUFNOzs7SUFBTjtRQUNDLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0tBQ25DOzs7OztJQUVPLGlDQUFZOzs7O2NBQUMsSUFBb0I7UUFDeEMscUJBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsR0FBRyxDQUFBLENBQUMscUJBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFBLENBQUM7WUFDcEIsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEM7OztnQkF4REYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxhQUFhO29CQUN2QixRQUFRLEVBQUUsZ0dBQzZEO29CQUN4RSxNQUFNLEVBQUUsQ0FBQywwYUFBMGEsQ0FBQztvQkFDcGIsSUFBSSxFQUFFLEVBQUUsU0FBUyxFQUFFLDZCQUE2QixFQUFFLG9CQUFvQixFQUFFLDJCQUEyQixFQUFFO2lCQUNyRzs7OztnQkFUUSxpQkFBaUI7OzswQkF1QnhCLEtBQUs7eUJBVUwsS0FBSzs7cUJBbENQOztTQVdhLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5neFNwaW5uZXJTZXJ2aWNlIH0gZnJvbSAnLi9uZ3gtc3Bpbm5lci5zZXJ2aWNlJztcbmltcG9ydCB7IElTcGlubmVyQ29uZmlnLCBERUZBVUxUX0NPTkZJRyB9IGZyb20gJy4uL25neC1zcGlubmVyLnR5cGVzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LXNwaW5uZXInLFxuICB0ZW1wbGF0ZTogYDwhLS0gc3Bpbm5lciAtLT5cbjxuZy10ZW1wbGF0ZSAqbmdJZj1cInZpc2libGVcIiBbc3Bpbm5lci1hbmltYXRpb25dPVwiY29uZmlnXCI+PC9uZy10ZW1wbGF0ZT5gLFxuXHRzdHlsZXM6IFtgOmhvc3QuYmxvY2tfd2luZG93e2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3Bvc2l0aW9uOmZpeGVkO2Rpc3BsYXk6ZmxleDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3RvcDowO2xlZnQ6MDt6LWluZGV4OjEwMDAyfTpob3N0LmJsb2NrX3Vpe2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3Bvc2l0aW9uOmFic29sdXRlO2Rpc3BsYXk6ZmxleDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3RvcDowO2xlZnQ6MDt6LWluZGV4OjEwMDAxfTpob3N0LmlucGxhY2V7cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZDowIDAhaW1wb3J0YW50O2Rpc3BsYXk6ZmxleDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3RvcDowO2xlZnQ6MDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OnN0YXJ0fWBdLFxuXHRob3N0OiB7ICdbY2xhc3NdJzogJ3Zpc2libGU/Y29uZmlnLnBsYWNlbWVudDpcIlwiJywgJ1tzdHlsZS5iYWNrZ3JvdW5kXSc6ICd2aXNpYmxlP2NvbmZpZy5iZ0NvbG9yOlwiXCInIH1cbn0pXG5leHBvcnQgY2xhc3MgTmd4U3Bpbm5lciB7XG5cdHByaXZhdGUgX2NvbmZpZzogSVNwaW5uZXJDb25maWcgPSB7fTtcblx0cHJpdmF0ZSBfaXNWaXNpYmxlOiBib29sZWFuO1xuXHRcblx0Y29uc3RydWN0b3IocHJpdmF0ZSBuZ3hTcGlubmVyU2VydmljZTogTmd4U3Bpbm5lclNlcnZpY2UpIHtcblx0XHQvLyBhc3NpZ24gZGVmYXVsdCBjb25maWdcblx0XHR0aGlzLmFzc2lnbkNvbmZpZyhERUZBVUxUX0NPTkZJRyk7XG5cdFx0Ly8gb3ZlcnJpZGUgd3RpaCBnbG9ibGUgY29uZmlnXG5cdFx0dGhpcy5hc3NpZ25Db25maWcoTmd4U3Bpbm5lclNlcnZpY2UuZ2xvYmFsU3Bpbm5lckNvbmYpO1xuXHRcdC8vIGhpZGUgc3Bpbm5lciBhcyBkZWZhdWx0XG5cdFx0dGhpcy5faXNWaXNpYmxlID0gZmFsc2U7XG5cdH1cblxuXHRASW5wdXQoKVxuXHRzZXQgdmlzaWJsZShjb25kaXRpb246IGFueSl7XG5cdFx0aWYoY29uZGl0aW9uKVxuXHRcdFx0dGhpcy5zaG93KCk7XG5cdFx0ZWxzZVxuXHRcdFx0dGhpcy5oaWRlKCk7XG5cdH1cblx0Z2V0IHZpc2libGUoKXtcblx0XHRyZXR1cm4gdGhpcy5faXNWaXNpYmxlO1xuXHR9XG5cdEBJbnB1dCgpXG5cdHNldCBjb25maWcoY29uZjogSVNwaW5uZXJDb25maWcpe1xuXHRcdC8vIG92ZXJyaWRlIHdpdGggc3Bpbm5lciBjb25maWdcblx0XHR0aGlzLmFzc2lnbkNvbmZpZyhjb25mKTtcblx0fVxuXHRnZXQgY29uZmlnKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2NvbmZpZztcblx0fVxuXHRcblx0c2hvdygpOiB2b2lkIHtcblx0XHR0aGlzLl9pc1Zpc2libGUgPSB0cnVlO1xuXHR9XG5cblx0aGlkZSgpOiB2b2lkIHtcblx0XHR0aGlzLl9pc1Zpc2libGUgPSBmYWxzZTtcblx0fVxuXG5cdHRvZ2dsZSgpOiB2b2lkIHtcblx0XHR0aGlzLl9pc1Zpc2libGUgPSAhdGhpcy5faXNWaXNpYmxlO1xuXHR9XG5cblx0cHJpdmF0ZSBhc3NpZ25Db25maWcoY29uZjogSVNwaW5uZXJDb25maWcpIHtcblx0XHRsZXQgY25mID0gT2JqZWN0LmFzc2lnbihjb25mKTtcblx0XHRmb3IobGV0IHByb3AgaW4gY25mKXtcblx0XHRcdGlmKGNuZi5oYXNPd25Qcm9wZXJ0eShwcm9wKSlcblx0XHRcdFx0dGhpcy5fY29uZmlnW3Byb3BdID0gY25mW3Byb3BdO1xuXHRcdH1cblx0fVxuXG59XG4iXX0=