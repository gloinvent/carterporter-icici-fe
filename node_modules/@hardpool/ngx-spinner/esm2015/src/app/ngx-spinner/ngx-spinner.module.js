/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgxSpinner } from './ngx-spinner/ngx-spinner.component';
import { NgxSpinnerService } from './ngx-spinner/ngx-spinner.service';
import { SpinnerAnimationDirective } from './spinner-animation.directive';
import { BlinkComponent } from './blink/blink.component';
import { FbCardComponent } from './fb-card/fb-card.component';
import { PlateRotateComponent } from './plate-rotate/plate-rotate.component';
import { DoubleBounceComponent } from './double-bounce/double-bounce.component';
import { FoldingCubeComponent } from './folding-cube/folding-cube.component';
import { BarsComponent } from './bars/bars.component';
import { RotatingDotsComponent } from './rotating-dots/rotating-dots.component';
import { HorizontalBounceComponent } from './horizontal-bounce/horizontal-bounce.component';
import { Spin1Component } from './spin1/spin1.component';
import { Spin2Component } from './spin2/spin2.component';
import { Spin3Component } from './spin3/spin3.component';
import { Spin4Component } from './spin4/spin4.component';
export class NgxSpinnerModule {
    /**
     * @param {?=} conf
     * @return {?}
     */
    static config(conf = {}) {
        NgxSpinnerService.globalSpinnerConf = Object.assign(conf);
        return this;
    }
}
NgxSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                entryComponents: [
                    Spin4Component, Spin3Component, Spin2Component, Spin1Component, HorizontalBounceComponent, BlinkComponent, FbCardComponent, PlateRotateComponent, DoubleBounceComponent, FoldingCubeComponent, BarsComponent, RotatingDotsComponent
                ],
                declarations: [
                    SpinnerAnimationDirective,
                    NgxSpinner,
                    BlinkComponent, FbCardComponent, PlateRotateComponent, DoubleBounceComponent, FoldingCubeComponent, BarsComponent, RotatingDotsComponent, HorizontalBounceComponent, Spin1Component, Spin2Component, Spin3Component, Spin4Component
                ],
                exports: [NgxSpinner],
                providers: [NgxSpinnerService]
            },] },
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNwaW5uZXIubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGhhcmRwb29sL25neC1zcGlubmVyLyIsInNvdXJjZXMiOlsic3JjL2FwcC9uZ3gtc3Bpbm5lci9uZ3gtc3Bpbm5lci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUVqRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN0RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMxRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzlELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNoRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUM1RixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFpQnpELE1BQU07Ozs7O0lBRUwsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUF1QixFQUFFO1FBQ3RDLGlCQUFpQixDQUFDLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUQsTUFBTSxDQUFDLElBQUksQ0FBQztLQUNaOzs7WUFwQkQsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRTtvQkFDUCxZQUFZO2lCQUNkO2dCQUNELGVBQWUsRUFBRTtvQkFDaEIsY0FBYyxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLHlCQUF5QixFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsb0JBQW9CLEVBQUUscUJBQXFCLEVBQUUsb0JBQW9CLEVBQUUsYUFBYSxFQUFFLHFCQUFxQjtpQkFDbk87Z0JBQ0QsWUFBWSxFQUFFO29CQUNiLHlCQUF5QjtvQkFDekIsVUFBVTtvQkFDVixjQUFjLEVBQUUsZUFBZSxFQUFFLG9CQUFvQixFQUFFLHFCQUFxQixFQUFFLG9CQUFvQixFQUFFLGFBQWEsRUFBRSxxQkFBcUIsRUFBRSx5QkFBeUIsRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxjQUFjO2lCQUNuTztnQkFDRCxPQUFPLEVBQUUsQ0FBRSxVQUFVLENBQUU7Z0JBQ3ZCLFNBQVMsRUFBRSxDQUFFLGlCQUFpQixDQUFFO2FBQ2hDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ3hTcGlubmVyIH0gZnJvbSAnLi9uZ3gtc3Bpbm5lci9uZ3gtc3Bpbm5lci5jb21wb25lbnQnO1xuaW1wb3J0IHsgSVNwaW5uZXJDb25maWcgfSBmcm9tICcuL25neC1zcGlubmVyLnR5cGVzJztcbmltcG9ydCB7IE5neFNwaW5uZXJTZXJ2aWNlIH0gZnJvbSAnLi9uZ3gtc3Bpbm5lci9uZ3gtc3Bpbm5lci5zZXJ2aWNlJztcbmltcG9ydCB7IFNwaW5uZXJBbmltYXRpb25EaXJlY3RpdmUgfSBmcm9tICcuL3NwaW5uZXItYW5pbWF0aW9uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBCbGlua0NvbXBvbmVudCB9IGZyb20gJy4vYmxpbmsvYmxpbmsuY29tcG9uZW50JztcbmltcG9ydCB7IEZiQ2FyZENvbXBvbmVudCB9IGZyb20gJy4vZmItY2FyZC9mYi1jYXJkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQbGF0ZVJvdGF0ZUNvbXBvbmVudCB9IGZyb20gJy4vcGxhdGUtcm90YXRlL3BsYXRlLXJvdGF0ZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRG91YmxlQm91bmNlQ29tcG9uZW50IH0gZnJvbSAnLi9kb3VibGUtYm91bmNlL2RvdWJsZS1ib3VuY2UuY29tcG9uZW50JztcbmltcG9ydCB7IEZvbGRpbmdDdWJlQ29tcG9uZW50IH0gZnJvbSAnLi9mb2xkaW5nLWN1YmUvZm9sZGluZy1jdWJlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCYXJzQ29tcG9uZW50IH0gZnJvbSAnLi9iYXJzL2JhcnMuY29tcG9uZW50JztcbmltcG9ydCB7IFJvdGF0aW5nRG90c0NvbXBvbmVudCB9IGZyb20gJy4vcm90YXRpbmctZG90cy9yb3RhdGluZy1kb3RzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBIb3Jpem9udGFsQm91bmNlQ29tcG9uZW50IH0gZnJvbSAnLi9ob3Jpem9udGFsLWJvdW5jZS9ob3Jpem9udGFsLWJvdW5jZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3BpbjFDb21wb25lbnQgfSBmcm9tICcuL3NwaW4xL3NwaW4xLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTcGluMkNvbXBvbmVudCB9IGZyb20gJy4vc3BpbjIvc3BpbjIuY29tcG9uZW50JztcbmltcG9ydCB7IFNwaW4zQ29tcG9uZW50IH0gZnJvbSAnLi9zcGluMy9zcGluMy5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3BpbjRDb21wb25lbnQgfSBmcm9tICcuL3NwaW40L3NwaW40LmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGVcblx0XSxcblx0ZW50cnlDb21wb25lbnRzOiBbXG5cdFx0U3BpbjRDb21wb25lbnQsIFNwaW4zQ29tcG9uZW50LCBTcGluMkNvbXBvbmVudCwgU3BpbjFDb21wb25lbnQsIEhvcml6b250YWxCb3VuY2VDb21wb25lbnQsIEJsaW5rQ29tcG9uZW50LCBGYkNhcmRDb21wb25lbnQsIFBsYXRlUm90YXRlQ29tcG9uZW50LCBEb3VibGVCb3VuY2VDb21wb25lbnQsIEZvbGRpbmdDdWJlQ29tcG9uZW50LCBCYXJzQ29tcG9uZW50LCBSb3RhdGluZ0RvdHNDb21wb25lbnRcblx0XSxcblx0ZGVjbGFyYXRpb25zOiBbXG5cdFx0U3Bpbm5lckFuaW1hdGlvbkRpcmVjdGl2ZSwgXG5cdFx0Tmd4U3Bpbm5lciwgXG5cdFx0QmxpbmtDb21wb25lbnQsIEZiQ2FyZENvbXBvbmVudCwgUGxhdGVSb3RhdGVDb21wb25lbnQsIERvdWJsZUJvdW5jZUNvbXBvbmVudCwgRm9sZGluZ0N1YmVDb21wb25lbnQsIEJhcnNDb21wb25lbnQsIFJvdGF0aW5nRG90c0NvbXBvbmVudCwgSG9yaXpvbnRhbEJvdW5jZUNvbXBvbmVudCwgU3BpbjFDb21wb25lbnQsIFNwaW4yQ29tcG9uZW50LCBTcGluM0NvbXBvbmVudCwgU3BpbjRDb21wb25lbnQgXG5cdF0sXG5cdGV4cG9ydHM6IFsgTmd4U3Bpbm5lciBdLFxuXHRwcm92aWRlcnM6IFsgTmd4U3Bpbm5lclNlcnZpY2UgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hTcGlubmVyTW9kdWxlIHtcblxuXHRzdGF0aWMgY29uZmlnKGNvbmY6IElTcGlubmVyQ29uZmlnID0ge30pe1xuXHRcdE5neFNwaW5uZXJTZXJ2aWNlLmdsb2JhbFNwaW5uZXJDb25mID0gT2JqZWN0LmFzc2lnbihjb25mKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG59XG4iXX0=