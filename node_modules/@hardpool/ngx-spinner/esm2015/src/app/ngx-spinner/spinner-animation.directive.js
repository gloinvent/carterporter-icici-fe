/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, Input, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';
import { SPINNER_ANIMATIONS } from './ngx-spinner.types';
import { BlinkComponent } from './blink/blink.component';
import { FbCardComponent } from './fb-card/fb-card.component';
import { PlateRotateComponent } from './plate-rotate/plate-rotate.component';
import { DoubleBounceComponent } from './double-bounce/double-bounce.component';
import { FoldingCubeComponent } from './folding-cube/folding-cube.component';
import { BarsComponent } from './bars/bars.component';
import { RotatingDotsComponent } from './rotating-dots/rotating-dots.component';
import { HorizontalBounceComponent } from './horizontal-bounce/horizontal-bounce.component';
import { Spin1Component } from './spin1/spin1.component';
import { Spin2Component } from './spin2/spin2.component';
import { Spin3Component } from './spin3/spin3.component';
export class SpinnerAnimationDirective {
    /**
     * @param {?} viewContainerRef
     * @param {?} componentFactoryResolver
     */
    constructor(viewContainerRef, componentFactoryResolver) {
        this.viewContainerRef = viewContainerRef;
        this.componentFactoryResolver = componentFactoryResolver;
    }
    /**
     * @param {?} conf
     * @return {?}
     */
    set config(conf) {
        this.init(conf);
    }
    /**
     * @param {?} conf
     * @return {?}
     */
    init(conf) {
        let /** @type {?} */ componenet = BlinkComponent;
        if (conf.animation == SPINNER_ANIMATIONS.blink) {
            // blink
            componenet = BlinkComponent;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.fb_card) {
            // fb_card
            componenet = FbCardComponent;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.plate_rotate) {
            componenet = PlateRotateComponent;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.double_bounce) {
            componenet = DoubleBounceComponent;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.folding_cube) {
            componenet = FoldingCubeComponent;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.bars) {
            componenet = BarsComponent;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.rotating_dots) {
            componenet = RotatingDotsComponent;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.horizontal_bounce) {
            componenet = HorizontalBounceComponent;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.spin_1) {
            componenet = Spin1Component;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.spin_2) {
            componenet = Spin2Component;
        }
        else if (conf.animation == SPINNER_ANIMATIONS.spin_3) {
            componenet = Spin3Component;
        } /* else if(conf.animation==SPINNER_ANIMATIONS.spin_4) {
                    componenet = Spin4Component;
                } */
        let /** @type {?} */ componentFactory = this.componentFactoryResolver.resolveComponentFactory(componenet);
        this.viewContainerRef.clear();
        let /** @type {?} */ componentRef = this.viewContainerRef.createComponent(componentFactory);
        (componentRef.instance).config = conf;
    }
}
SpinnerAnimationDirective.decorators = [
    { type: Directive, args: [{
                selector: '[spinner-animation]'
            },] },
];
/** @nocollapse */
SpinnerAnimationDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver }
];
SpinnerAnimationDirective.propDecorators = {
    config: [{ type: Input, args: ['spinner-animation',] }]
};
function SpinnerAnimationDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    SpinnerAnimationDirective.prototype.viewContainerRef;
    /** @type {?} */
    SpinnerAnimationDirective.prototype.componentFactoryResolver;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci1hbmltYXRpb24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGhhcmRwb29sL25neC1zcGlubmVyLyIsInNvdXJjZXMiOlsic3JjL2FwcC9uZ3gtc3Bpbm5lci9zcGlubmVyLWFuaW1hdGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLHdCQUF3QixFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUMzRyxPQUFPLEVBQWtCLGtCQUFrQixFQUFxQixNQUFNLHFCQUFxQixDQUFDO0FBQzVGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDN0UsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDaEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDN0UsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQzVGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBTXpELE1BQU07Ozs7O0lBRUwsWUFBb0IsZ0JBQWtDLEVBQVUsd0JBQWtEO1FBQTlGLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFBVSw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBC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d0NvbnRhaW5lclJlZiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBDb21wb25lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElTcGlubmVyQ29uZmlnLCBTUElOTkVSX0FOSU1BVElPTlMsIElTcGlubmVyQW5pbWF0aW9uIH0gZnJvbSAnLi9uZ3gtc3Bpbm5lci50eXBlcyc7XG5pbXBvcnQgeyBCbGlua0NvbXBvbmVudCB9IGZyb20gJy4vYmxpbmsvYmxpbmsuY29tcG9uZW50JztcbmltcG9ydCB7IEZiQ2FyZENvbXBvbmVudCB9IGZyb20gJy4vZmItY2FyZC9mYi1jYXJkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQbGF0ZVJvdGF0ZUNvbXBvbmVudCB9IGZyb20gJy4vcGxhdGUtcm90YXRlL3BsYXRlLXJvdGF0ZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRG91YmxlQm91bmNlQ29tcG9uZW50IH0gZnJvbSAnLi9kb3VibGUtYm91bmNlL2RvdWJsZS1ib3VuY2UuY29tcG9uZW50JztcbmltcG9ydCB7IEZvbGRpbmdDdWJlQ29tcG9uZW50IH0gZnJvbSAnLi9mb2xkaW5nLWN1YmUvZm9sZGluZy1jdWJlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCYXJzQ29tcG9uZW50IH0gZnJvbSAnLi9iYXJzL2JhcnMuY29tcG9uZW50JztcbmltcG9ydCB7IFJvdGF0aW5nRG90c0NvbXBvbmVudCB9IGZyb20gJy4vcm90YXRpbmctZG90cy9yb3RhdGluZy1kb3RzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBIb3Jpem9udGFsQm91bmNlQ29tcG9uZW50IH0gZnJvbSAnLi9ob3Jpem9udGFsLWJvdW5jZS9ob3Jpem9udGFsLWJvdW5jZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3BpbjFDb21wb25lbnQgfSBmcm9tICcuL3NwaW4xL3NwaW4xLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTcGluMkNvbXBvbmVudCB9IGZyb20gJy4vc3BpbjIvc3BpbjIuY29tcG9uZW50JztcbmltcG9ydCB7IFNwaW4zQ29tcG9uZW50IH0gZnJvbSAnLi9zcGluMy9zcGluMy5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3BpbjRDb21wb25lbnQgfSBmcm9tICcuL3NwaW40L3NwaW40LmNvbXBvbmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tzcGlubmVyLWFuaW1hdGlvbl0nXG59KVxuZXhwb3J0IGNsYXNzIFNwaW5uZXJBbmltYXRpb25EaXJlY3RpdmUge1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgcHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcikgeyB9XG5cdFxuXHRASW5wdXQoJ3NwaW5uZXItYW5pbWF0aW9uJylcbiAgc2V0IGNvbmZpZyhjb25mOiBJU3Bpbm5lckNvbmZpZyl7XG5cdFx0dGhpcy5pbml0KGNvbmYpO1xuXHR9XG5cdFxuXHRwcml2YXRlIGluaXQoY29uZjogSVNwaW5uZXJDb25maWcpe1xuXHRcdGxldCBjb21wb25lbmV0ID0gQmxpbmtDb21wb25lbnQ7XG5cdFx0aWYoY29uZi5hbmltYXRpb249PVNQSU5ORVJfQU5JTUFUSU9OUy5ibGluayl7XHRcdC8vIGJsaW5rXG5cdFx0XHRjb21wb25lbmV0ID0gQmxpbmtDb21wb25lbnQ7XG5cdFx0fSBlbHNlIGlmKGNvbmYuYW5pbWF0aW9uPT1TUElOTkVSX0FOSU1BVElPTlMuZmJfY2FyZCkge1x0XHQvLyBmYl9jYXJkXG5cdFx0XHRjb21wb25lbmV0ID0gRmJDYXJkQ29tcG9uZW50O1xuXHRcdH0gZWxzZSBpZihjb25mLmFuaW1hdGlvbj09U1BJTk5FUl9BTklNQVRJT05TLnBsYXRlX3JvdGF0ZSkge1xuXHRcdFx0Y29tcG9uZW5ldCA9IFBsYXRlUm90YXRlQ29tcG9uZW50O1xuXHRcdH0gZWxzZSBpZihjb25mLmFuaW1hdGlvbj09U1BJTk5FUl9BTklNQVRJT05TLmRvdWJsZV9ib3VuY2UpIHtcblx0XHRcdGNvbXBvbmVuZXQgPSBEb3VibGVCb3VuY2VDb21wb25lbnQ7XG5cdFx0fSBlbHNlIGlmKGNvbmYuYW5pbWF0aW9uPT1TUElOTkVSX0FOSU1BVElPTlMuZm9sZGluZ19jdWJlKSB7XG5cdFx0XHRjb21wb25lbmV0ID0gRm9sZGluZ0N1YmVDb21wb25lbnQ7XG5cdFx0fSBlbHNlIGlmKGNvbmYuYW5pbWF0aW9uPT1TUElOTkVSX0FOSU1BVElPTlMuYmFycykge1xuXHRcdFx0Y29tcG9uZW5ldCA9IEJhcnNDb21wb25lbnQ7XG5cdFx0fSBlbHNlIGlmKGNvbmYuYW5pbWF0aW9uPT1TUElOTkVSX0FOSU1BVElPTlMucm90YXRpbmdfZG90cykge1xuXHRcdFx0Y29tcG9uZW5ldCA9IFJvdGF0aW5nRG90c0NvbXBvbmVudDtcblx0XHR9IGVsc2UgaWYoY29uZi5hbmltYXRpb249PVNQSU5ORVJfQU5JTUFUSU9OUy5ob3Jpem9udGFsX2JvdW5jZSkge1xuXHRcdFx0Y29tcG9uZW5ldCA9IEhvcml6b250YWxCb3VuY2VDb21wb25lbnQ7XG5cdFx0fSBlbHNlIGlmKGNvbmYuYW5pbWF0aW9uPT1TUElOTkVSX0FOSU1BVElPTlMuc3Bpbl8xKSB7XG5cdFx0XHRjb21wb25lbmV0ID0gU3BpbjFDb21wb25lbnQ7XG5cdFx0fSBlbHNlIGlmKGNvbmYuYW5pbWF0aW9uPT1TUElOTkVSX0FOSU1BVElPTlMuc3Bpbl8yKSB7XG5cdFx0XHRjb21wb25lbmV0ID0gU3BpbjJDb21wb25lbnQ7XG5cdFx0fSBlbHNlIGlmKGNvbmYuYW5pbWF0aW9uPT1TUElOTkVSX0FOSU1BVElPTlMuc3Bpbl8zKSB7XG5cdFx0XHRjb21wb25lbmV0ID0gU3BpbjNDb21wb25lbnQ7XG5cdFx0fSAvKiBlbHNlIGlmKGNvbmYuYW5pbWF0aW9uPT1TUElOTkVSX0FOSU1BVElPTlMuc3Bpbl80KSB7XG5cdFx0XHRjb21wb25lbmV0ID0gU3BpbjRDb21wb25lbnQ7XG5cdFx0fSAqL1xuXG5cdFx0bGV0IGNvbXBvbmVudEZhY3RvcnkgPSB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShjb21wb25lbmV0KTtcblx0XHR0aGlzLnZpZXdDb250YWluZXJSZWYuY2xlYXIoKTtcblx0XHRsZXQgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8SVNwaW5uZXJBbmltYXRpb24+ID0gdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUNvbXBvbmVudChjb21wb25lbnRGYWN0b3J5KTtcblx0XHQoY29tcG9uZW50UmVmLmluc3RhbmNlKS5jb25maWcgPSBjb25mO1xuXHR9XG5cbn1cbiJdfQ==